#include <CapacitiveSensor.h>


#define NOTE_B0 31
#define NOTE_C1 33
#define NOTE_CS1 35
#define NOTE_D1 37
#define NOTE_DS1 39
#define NOTE_E1 41
#define NOTE_F1 44
#define NOTE_FS1 46
#define NOTE_G1 49
#define NOTE_GS1 52
#define NOTE_A1 55
#define NOTE_AS1 58
#define NOTE_B1 62
#define NOTE_C2 65
#define NOTE_CS2 69
#define NOTE_D2 73
#define NOTE_DS2 78
#define NOTE_E2 82
#define NOTE_F2 87
#define NOTE_FS2 93
#define NOTE_G2 98
#define NOTE_GS2 104
#define NOTE_A2 110
#define NOTE_AS2 117
#define NOTE_B2 123
#define NOTE_C3 131
#define NOTE_CS3 139
#define NOTE_D3 147
#define NOTE_DS3 156
#define NOTE_E3 165
#define NOTE_F3 175
#define NOTE_FS3 185
#define NOTE_G3 196
#define NOTE_GS3 208
#define NOTE_A3 220
#define NOTE_AS3 233
#define NOTE_B3 247
#define NOTE_C4 262
#define NOTE_CS4 277
#define NOTE_D4 294
#define NOTE_DS4 311
#define NOTE_E4 330
#define NOTE_F4 349
#define NOTE_FS4 370
#define NOTE_G4 392
#define NOTE_GS4 415
#define NOTE_A4 440
#define NOTE_AS4 466
#define NOTE_B4 494
#define NOTE_C5 523
#define NOTE_CS5 554
#define NOTE_D5 587
#define NOTE_DS5 622
#define NOTE_E5 659
#define NOTE_F5 698
#define NOTE_FS5 740
#define NOTE_G5 784
#define NOTE_GS5 831
#define NOTE_A5 880
#define NOTE_AS5 932
#define NOTE_B5 988
#define NOTE_C6 1047
#define NOTE_CS6 1109
#define NOTE_D6 1175
#define NOTE_DS6 1245
#define NOTE_E6 1319
#define NOTE_F6 1397
#define NOTE_FS6 1480
#define NOTE_G6 1568
#define NOTE_GS6 1661
#define NOTE_A6 1760
#define NOTE_AS6 1865
#define NOTE_B6 1976
#define NOTE_C7 2093
#define NOTE_CS7 2217
#define NOTE_D7 2349
#define NOTE_DS7 2489
#define NOTE_E7 2637
#define NOTE_F7 2794
#define NOTE_FS7 2960
#define NOTE_G7 3136
#define NOTE_GS7 3322
#define NOTE_A7 3520
#define NOTE_AS7 3729
#define NOTE_B7 3951
#define NOTE_C8 4186
#define NOTE_CS8 4435
#define NOTE_D8 4699
#define NOTE_DS8 4978


//define pin numbers
int pot = A0;
int cString = 22;
int cSString = 24;
int dString = 26;
int dSString = 28;
int eString = 30;
int fString = 32;
int fSString = 34;
int gString = 36;
int gSString = 38;
int aString = 40;
int aSString = 42;
int bString = 44;
int octave = 46;


CapacitiveSensor   cs_1 = CapacitiveSensor(4,cString);        
CapacitiveSensor   cs_2 = CapacitiveSensor(4,cSString);        
CapacitiveSensor   cs_3 = CapacitiveSensor(4,dString);        
CapacitiveSensor   cs_4 = CapacitiveSensor(4,dSString);        
CapacitiveSensor   cs_5 = CapacitiveSensor(4,eString); 
CapacitiveSensor   cs_6 = CapacitiveSensor(4,fString);  
CapacitiveSensor   cs_7 = CapacitiveSensor(4,fSString);  
CapacitiveSensor   cs_8 = CapacitiveSensor(4,gString);  
CapacitiveSensor   cs_9 = CapacitiveSensor(4,gSString);  
CapacitiveSensor   cs_10 = CapacitiveSensor(4,aString);  
CapacitiveSensor   cs_11 = CapacitiveSensor(4,aSString);  
CapacitiveSensor   cs_12 = CapacitiveSensor(4,bString);  
CapacitiveSensor   cs_13 = CapacitiveSensor(4,octave);         


int speakerPin = 12;

//define scales
//int cScale[] = {cString, dString, eString, fString, gString, aString, bString, octave};


void setup() {
  cs_1.set_CS_AutocaL_Millis(0xFFFFFFFF);     // turn off autocalibrate on channel 1 - just as an example
  Serial.begin(9600); 
}


void loop() {

  //set values for capacitive sensors
  long start = millis();
  long total1 =  cs_1.capacitiveSensor(30);
  long total2 =  cs_2.capacitiveSensor(30);
  long total3 =  cs_3.capacitiveSensor(30);
  long total4 =  cs_4.capacitiveSensor(30);
  long total5 =  cs_5.capacitiveSensor(30);
  long total6 =  cs_6.capacitiveSensor(30);
  long total7 =  cs_7.capacitiveSensor(30);
  long total8 =  cs_8.capacitiveSensor(30);
  long total9 =  cs_9.capacitiveSensor(30);
  long total10 =  cs_10.capacitiveSensor(30);
  long total11 =  cs_11.capacitiveSensor(30);
  long total12 =  cs_12.capacitiveSensor(30);
  long total13 =  cs_13.capacitiveSensor(30);
      
      
//collect potentiometer value 
  int potRead = analogRead(pot);
  int choice = map(potRead, 0, 1023, 0, 3);
  //Serial.println(choice);
  
  
    if(total1 > 100)
    {
      tone(speakerPin, NOTE_C4);
    }
    else if(total2 > 100)
    {
      tone(speakerPin, NOTE_CS4);
    }
    else if(total3 > 100)
    {
      tone(speakerPin, NOTE_D4);
    }
    else if(total4 > 100)
    {
      tone(speakerPin, NOTE_DS4);
    }
    else if(total5 > 100)
    {
      tone(speakerPin, NOTE_E4);
    }
    else if(total6 > 100)
    {
      tone(speakerPin, NOTE_F4);
    }
    else if(total7 > 100)
    {
      tone(speakerPin, NOTE_FS4);
    }
    else if(total8 > 100)
    {
      tone(speakerPin, NOTE_G4);
    }
    else if(total9 > 100)
    {
      tone(speakerPin, NOTE_GS4);
    }
    else if(total10 > 100)
    {
      tone(speakerPin, NOTE_A4);
    }
    else if(total11 > 100)
    {
      tone(speakerPin, NOTE_AS4);
    }
    else if(total12 > 100)
    {
      tone(speakerPin, NOTE_B4);
    }
    else if(total13 > 100)
    {
      tone(speakerPin, NOTE_C5);
    }
    else
    {
      noTone(speakerPin);
    }


Serial.println('D');

    if(total1 > 100)
    {
      Serial.println(1);
    }
    else if(total2 > 100)
    {
      Serial.println(2);
    }
    else if(total3 > 100)
    {
      Serial.println(3);
    }
    else if(total4 > 100)
    {
      Serial.println(4);
    }
    else if(total5 > 100)
    {
      Serial.println(5);
    }
    else if(total6 > 100)
    {
      Serial.println(6);
    }
    else if(total7 > 100)
    {
      Serial.println(7);
    }
    else if(total8 > 100)
    {
      Serial.println(8);
    }
    else if(total9 > 100)
    {
      Serial.println(9);
    }
    else if(total10 > 100)
    {
      Serial.println(10);
    }
    else if(total11 > 100)
    {
      Serial.println(11);
    }
    else if(total12 > 100)
    {
      Serial.println(12);
    }
    else if(total13 > 100)
    {
      Serial.println(13);
    }
    else
    {
      noTone(speakerPin);
    }

  Serial.println('d');
  // short break
  delay(20);

  
}

